/**
 * extend method for js class
 * @param subClass
 * @param baseClass
 */
var extend = function(subClass, baseClass){
	var parent = subClass.parent = {
		/**
		 * parent construct
		 * @param obj currentObject
		 * @param args
		 */
		'__construct': function(obj, args){
			baseClass.apply(obj, args);
		}
	};

	for(var method in baseClass.prototype){
		parent[method] = baseClass.prototype[method];
		if(! (method in subClass.prototype)){
			subClass.prototype[method] = baseClass.prototype[method];
		}

	}
};

exports.extend = extend;
/**
 * mix object
 * @param base
 * @param child
 * @param deep
 * @returns {Object}
 */
var mix = function(base, child, deep){
	var o = new Object();
	for(var key in base){
		o[key] = base[key];
	}
	for(var key in child){
		if(deep && isPlainObject(o[key])){
			o[key] = mix(o[key], child[key]);
		}else{
			o[key] = child[key];
		}
	}
	return o;
};

exports.mix = mix;

