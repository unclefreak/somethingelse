var stringTools = require('./utils/string'),
    formidable = require('formidable'),
    View = require('./view'),
	MysqlDatabase = require('./mysql_database'),
    Config = require('./config'),
    oo = require('./utils/oo'),
    EventEmitter = require('event').EventEmitter;

var AbstractController = function(intent){
	this._initAbstractController(intent);
};

AbstractController.prototype = {
    /**
     * 重载需回调
     * @param dispatchActionCallback
     * @private
     */
	_init: function(dispatchActionCallback){
        this.emit('dispatchAction', {status: true});
	},

	_initAbstractController: function(intent){
        EventEmitter.call(this);
        this.intent = intent;
        this.request = intent.request;
        this.response = intent.response;
        this.statusCode = intent.response.statusCode;
		this.renderScriptStatus = true;
		this.params = intent.params;
		this.controllerName = intent.controllerName;
		this.actionName = stringTools.dashToCamel(intent.actionName) + 'Action';
		this.view = new View(intent);
		this.db = null;
	},

	run: function(){
        var self = this;
        this._init(function(status){
            self.dispatchAction();
        });
        this.on('dispatchAction', function(event){
            self.dispatchAction();
        });
	},

    dispatchAction: function(){
        if(this[this.actionName]){
            this[this.actionName]();
            this.renderScriptStatus && this.render();
        }else{
            this.forward(oo.mix(this.intent, {
                controllerName: 'error',
                actionName: 'index',
                url: '/error/index',
                params: {status: 404, message: 'Action NOT Found!', info: this.intent}
            }));
        }
    },

	render: function (){
		var self = this;
		this.view.renderScript(function(viewContent){
			self.response.write(viewContent);
		});
	},

	json: function(content){
		this.setNoRender();
		this.response.write(content, this.statusCode);
	},
	/**
	 * 直接输出内容
	 * @param value
	 * @param statusCode
	 */
	exit: function(value, statusCode){
		if(statusCode){
			this.statusCode = statusCode;
		}
		this.setNoRender();

		this.json(value);
	},

	outputFile: function(data, mime){
		this.response.writeHead(200,
			{
				'Content-Type': mime,
				'Date': new Date(),
				'Cache-Control': 'max-age=600000',
				'Expires': new Date(new Date().getTime() + 86400000)
			});
		this.response.end(data, 'binary');
	},

	getDb: function(){
		if(!this.db){
			this.db = MysqlDatabase.getInstance(Config.db);
		}
		return this.db;
	},

	setNoRender: function(){
		this.renderScriptStatus = false;
        //this.setHeader("Content-Type", 'text/plain; charset=utf-8')
	},
    /**
     * 设置Header
     * @param name
     * @param value
     */
    setHeader: function(name, value){
        //this.response.setHeader(name, value);
    },
    /**
     * 获取原始POST数据
     * @param callback(error, data)
     */
    getRawPost: function(callback){
    	callback(null, this.intent.body);
    },

    /**
     * 获取表单数据
     * @param callback(err, fields, files)
     */
    getPost: function(callback){
       this.getRawPost(callback);
    },

	getParam: function(key, defaultValue){
		var value;
		if((value = this.request.getParam(key)) !== undefined){
			return value;
		}else{
			return defaultValue;
		}
	},

    forward: function(intent){
        var route = require('mvc/lib/route');
        route.forward(intent);
    },

    redirect: function(url){
    	//TODO
    }
};


oo.extend(AbstractController, EventEmitter);

module.exports = AbstractController;
